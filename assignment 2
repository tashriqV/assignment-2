
#2(chapter1)
from PIL import Image
import time

input_image = Image.open('/content/chapter1.jpg')

current_time = int(time.time())
generated_number = (current_time % 100) + 50
if generated_number % 2 == 0:
    generated_number += 10

width, height = input_image.size
for x in range(width):
    for y in range(height):
        r, g, b = input_image.getpixel((x, y))
        new_r = min(r + generated_number, 255)
        new_g = min(g + generated_number, 255)
        new_b = min(b + generated_number, 255)
        input_image.putpixel((x, y), (new_r, new_g, new_b))

output_file = 'chapter1out.png'
input_image.save(output_file)

print(output_file)


#2(chapter2)
s=""
n=""
a=input("give me a string ")
for i in a:
    if 97 <= ord(i) <= 122 or 65<=ord(i)<=90:
        s+=i
    else:
        n+=i
print("Letter string =",s,"  Number string =",n)
for i in n:
    if int(i)%2==0:
        print("Even numbers",i,"=",ord(i),"(ASCII values)")
for i in s:
    if 65<=ord(i)<=90:
        print("Upper class letters",i,"=",ord(i),"(ASCII values)")




#2(chapter2)
cryptogram = "VZ FRYSVFU VZCNGVRAG NAQ N YVGGYR VAFRPHER V ZNXR ZVFGNXRF V NZ BHG BS PBAGEBY NAQNG GVZRF UNEQ GB UNAQYR OHG VS LBH PNAG UNAQYR ZR NG ZL JBEFG GURA LBH FHER NF URYYQBAG QRFREIR ZR NG ZL ORFG ZNEVYLA ZBAEBR"

def decrypt(ciphertext, shift):
    decrypted_text = ""
    for char in ciphertext:
        if char.isalpha():
            shifted = ord(char) - shift
            if char.islower():
                if shifted < ord('a'):
                    shifted += 26
            elif char.isupper():
                if shifted < ord('A'):
                    shifted += 26
            decrypted_text += chr(shifted)
        else:
            decrypted_text += char
    return decrypted_text
def count_english_words(text):
    english_words = ["the", "be", "to", "of", "and", "a", "in", "that", "have", "i", "it", "for", "not", "on", "with", "he", "as", "you", "do", "at", "this", "but", "his", "by", "from", "they", "we", "say", "her", "she", "or", "an", "will", "my", "one", "all", "would", "there", "their", "what", "so", "up", "out", "if", "about", "who", "get", "which", "go", "me", "when", "make", "can", "like", "time", "no", "just", "him", "know", "take", "people", "into", "year", "your", "good", "some", "could", "them", "see", "other", "than", "then", "now", "look", "only", "come", "its", "over", "think", "also", "back", "after", "use", "two", "how", "our", "work", "first", "well", "way", "even", "new", "want", "because", "any", "these", "give", "day", "most", "us"]

    words = text.split()
    count = sum(word.lower() in english_words for word in words)
    return count

max_english_words = 0
best_shift = 0

for shift_value in range(1, 26):
    decrypted = decrypt(cryptogram, shift_value)
    english_word_count = count_english_words(decrypted)
    if english_word_count > max_english_words:
        max_english_words = english_word_count
        best_shift = shift_value

decrypted_message = decrypt(cryptogram, best_shift)
print(f"The original quote is: {decrypted_message}\nShift key used: {best_shift}")



#3
def encrypt(text,key):
    encrypttext=""
    for i in text:
        if i.isalpha():
            shifted=ord(i)+key
        if i.islower():
            if shifted > ord("z"):
                shifted-=26
            elif shifted<=ord("a"):
                shifted += 26
        elif i.isupper():
            if shifted > ord("Z"):
                shifted-=26
            elif shifted<=ord("A"):
                shifted += 26
        encrypttext+= chr(shifted)
    else:
        encrypttext+= i
    return encrypttext

def decrypt(encrypted_text, key):
    decrypted_text = ""
    for i in encrypted_text:
        if i.isalpha():
            shifted = ord(i) - key 
            if i.islower():
                if shifted > ord("z"):
                    shifted -= 26
                elif shifted < ord("a"):
                    shifted += 26
            elif i.isupper():
                if shifted > ord("Z"):
                    shifted -= 26
                elif shifted < ord("A"):
                    shifted += 26
            decrypted_text += chr(shifted)
        else:
            decrypted_text += i
    return decrypted_text
total=0
for i in range(5):
    for j in range(3):
        if i+j==5:
            total += i+j
        else:
            total -= i-j
counter=0
while counter<5:
    if total<13:
        total+=1
    elif total>13:
        total-=1
    else:
        counter+=2
print(total)
key=total
encrypted_code="""
tybony_inevnoyr = 100
zl_qvpg={'xrl1': 'inyhr1', 'xrl2': 'inyhr2', 'xrl3': 'inyhr3'}

qrs cebprff_ahzoref ():
        tybony tybony_inevnoyr
        ybpny_inevnoyr = 5
        ahzoref = [1, 2, 3, 4, 5]

        juvyr ybpny_inevnoyr > 0:
            vs ybpny_inevnoyr % 2==0:
                ahzoref.erzbir(ybpny_inevnoyr)
            ybpny_inevnoyr -= 1

        erghea ahzoref

zl_frg = {1, 2, 3, 4, 5, 5, 4, 3, 2, 1}
erfhyg = cebprff_ahzoref(ahzoref=zl_frg)

qrs zbqvsl_qvpg():

    ybpny_inevnoyr= 10
    zl_qvpg['xr14'] = ybpny_inevnoyr

zbqvsl_qvpg(5)

qrs hcqngr_tybony():
    tybony tybony_inevnoyr
    tybony_inevnoyr += 10

sbe v va enatr(5):
    cevag(v)
    v += 1
vs zl_frg vf abg Abar naq zl_qvpg['xr14'] == 10:
    cevag("Pbaqvgvba zrg!")

vs 5 abg va zl_qvpg:
    cevag("5 abg sbhaq va gur qvpgvbanel!")

cevag(tybony_inevnoyr)
cevag(zl_qvpg)
cevag(zl_frg)
"""
decrypted_code = decrypt(encrypted_code, key)
print("Decrypted code:", decrypted_code)



#fixing the code and explanation
global_variable = 100
my_dict = {'key1': 'Value1', 'key2': 'Value2', 'key3': 'Value3'}

def process_numbers():
    global global_variable
    local_variable = 5
    numbers = [1, 2, 3, 4, 5]

    while local_variable > 0:
        if local_variable % 2 == 0:
            numbers.remove(local_variable)
        local_variable -= 1

    return numbers

my_set = (1, 2, 3, 4, 5, 5, 4, 3, 2, 1)
result = process_numbers()  # process_numbers() does not take any arguments. so I removed (numbers = my_set)

def modify_dict():
    local_variable = 10
    my_dict['ke14'] = local_variable

modify_dict()  # modify_dict() takes no arguments, so i removed 5 from it

def update_global():
    global global_variable
    global_variable += 10

for i in range(5):
    print(i)
    i += 1 

if my_set is not None and my_dict['ke14'] == 10:
    print("Condition met!")

if 5 not in my_dict:
    print("5 not found in the dictionary!")

print(global_variable)
print(my_dict)
print(my_set)








